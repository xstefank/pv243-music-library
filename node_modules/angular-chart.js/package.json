{
  "name": "angular-chart.js",
  "version": "1.1.1",
  "description": "An angular.js wrapper for Chart.js",
  "homepage": "http://jtblin.github.io/angular-chart.js/",
  "main": "dist/angular-chart.js",
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "codeclimate": "./node_modules/codeclimate-test-reporter/bin/codeclimate.js < coverage/lcov.info",
    "docker": "npm run docker-build && npm run docker-test",
    "docker-build": "docker build -t angular-chart.js .",
    "docker-test": "docker run --rm -i -v $(pwd)/coverage/:/src/coverage/ -v $(pwd)/test/:/src/test/ -v $(pwd)/angular-chart.js:/src/angular-chart.js angular-chart.js",
    "test": "gulp check"
  },
  "author": {
    "name": "Jerome Touffe-Blin",
    "email": "jtblin@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jtblin/angular-chart.js.git"
  },
  "license": "BSD-2-Clause",
  "devDependencies": {
    "Rainbow": "git+https://github.com/ccampbell/rainbow.git",
    "angular-bootstrap": "^0.12.2",
    "angular-mocks": "^1.5.7",
    "bootstrap": "^3.3.7",
    "chai": "^3.4.1",
    "chai-string": "^1.2.0",
    "codeclimate-test-reporter": "^0.3.1",
    "cp": "^0.2.0",
    "font-awesome": "^4.6.3",
    "gm": "^1.22.0",
    "gulp": "^3.9.0",
    "gulp-bump": "^2.1.0",
    "gulp-git": "^1.7.1",
    "gulp-gzip": "^1.2.0",
    "gulp-header": "^1.8.3",
    "gulp-istanbul": "^1.0.0",
    "gulp-istanbul-report": "^0.0.1",
    "gulp-jscs": "^3.0.2",
    "gulp-jshint": "^2.0.0",
    "gulp-mocha-phantomjs": "^0.11.0",
    "gulp-rename": "^1.2.0",
    "gulp-rimraf": "^0.2.0",
    "gulp-sequence": "^0.4.1",
    "gulp-shell": "^0.5.1",
    "gulp-sourcemaps": "^1.0.0",
    "gulp-spawn-mocha": "^2.0.1",
    "gulp-tar": "^1.9.0",
    "gulp-uglify": "^1.5.3",
    "imgur-node-api": "^0.1.0",
    "jshint": "^2.9.1",
    "jshint-stylish": "^2.0.1",
    "mkdirp": "^0.5.0",
    "mocha": "^2.1.0",
    "mocha-phantomjs-istanbul": "^0.0.2",
    "requirejs": "^2.2.0",
    "sinon": "^1.12.2",
    "sinon-chai": "^2.7.0",
    "testatic": "^0.1.0",
    "tmp-sync": "^1.1.0",
    "webpack": "^1.13.1",
    "webshot": "^0.18.0"
  },
  "dependencies": {
    "angular": "1.x",
    "chart.js": "2.3.x"
  },
  "readme": "# angular-chart.js\n\n[![Bower version](https://badge.fury.io/bo/angular-chart.js.svg)](http://badge.fury.io/bo/angular-chart.js)\n[![npm version](https://badge.fury.io/js/angular-chart.js.svg)](http://badge.fury.io/js/angular-chart.js)\n[![Build Status](https://travis-ci.org/jtblin/angular-chart.js.svg?branch=master)](https://travis-ci.org/jtblin/angular-chart.js)\n[![Codacy Badge](https://api.codacy.com/project/badge/grade/6aa5ba92f4984a24874e5976ee541623)](https://www.codacy.com/app/jtblin/angular-chart-js)\n[![Code Coverage](https://d3s6mut3hikguw.cloudfront.net/github/jtblin/angular-chart.js/badges/coverage.svg)](https://codeclimate.com/github/jtblin/angular-chart.js)\n[![npm](https://img.shields.io/npm/dm/angular-chart.js.svg?maxAge=2592000)](https://www.npmjs.com/package/angular-chart.js)\n\nBeautiful, reactive, responsive charts for Angular.JS using [Chart.js](http://www.chartjs.org/). \n\nHave a look at the [demo site](http://jtblin.github.io/angular-chart.js/) to see examples with detailed markup, \nscript and options.\n\n# Installation\n\nThis is the `1.x` branch which requires Chart.js 2.x version. Following semantic versioning,\nthere are numerous **breaking changes** since 0.x, notably:\n\n* all options now need to use the `chart-` prefix\n* `chart-colours` is now `chart-colors` and `chart-get-colour` is now `chart-get-color`\n* chart types are in `camelCase` e.g. `line` and `polarArea`\n* legend is now a Chart.js option so the `chart-legend` attribute has been removed\n* events emitted on creation and update are now prefixed with `chart-` e.g. `chart-create`\n* `$scope.$apply` is not called anymore on mouse hover functions calls\n* obviously all Chart.js breaking changes as well in how options are set, etc.\n* disabling the `responsive` option doesn't work via global `Chart.defaults.global.responsive` anymore, \nbut must be set via standard options e.g. `ChartJsProvider.setOptions({ responsive: false });`\n* factory now returns a module name instead of a module instance\n\n### npm\n\n    npm install --save angular-chart.js\n\n### cdn\n\n    //cdn.jsdelivr.net/angular.chartjs/latest/angular-chart.min.js\n\n### bower\n\n    bower install --save angular-chart.js\n\n### manually\n\nor copy the files from `dist/`. \n\nThen add the sources to your code (adjust paths as needed) after \nadding the dependencies for Angular and Chart.js first:\n\n```html\n<head>\n  ...\n<head>\n<body>\n  ...\n</body>\n  <script src=\"node_modules/angular/angular.min.js\"></script>\n  <script src=\"node_modules/chart.js/Chart.min.js\"></script>\n  <script src=\"node_modules/angular-chart.js/dist/angular-chart.min.js\"></script>\n```\n\n# Utilisation\n\nThere are 8 types of charts so 8 directives: `chart-line`, `chart-bar`, `chart-horizontal-bar`, `chart-radar`, \n`chart-pie`, `chart-polar-area`, `chart-doughnut`, `chart-bubble`.\n\nHere are the options for all directives:\n\n- `chart-data`: series data\n- `chart-labels`: x axis labels (line, bar, horizontal bar, radar, bubble) or series labels (pie, doughnut, polar area)\n- `chart-options`: chart options (as from [Chart.js documentation](http://www.chartjs.org/docs/))\n- `chart-series`: (default: `[]`): series labels (line, bar, radar)\n- `chart-colors`: data colors (will use default colors if not specified)\n- `chart-get-color`: function that returns a color in case there are not enough (will use random colors if not specified)\n- `chart-click`: onclick event handler\n- `chart-hover`: onmousemove event handler\n- `chart-dataset-override`: override individual datasets to allow per dataset configuration e.g. y-axis, mixed type chart\n\nThere is another directive `chart-base` that takes an extra attribute `chart-type` to define the type\ndynamically. \n\nYou can create mixed type chart using the `chart-dataset-override`, see \n[bar-line example](http://jtblin.github.io/angular-chart.js/examples/dataset-override.html).\n\nSee also [stacked bar example](http://jtblin.github.io/angular-chart.js/examples/stacked-bars.html).\n\n# Example\n\n## Markup\n\n```html\n<canvas class=\"chart chart-line\" chart-data=\"data\" chart-labels=\"labels\" \n\tchart-series=\"series\" chart-click=\"onClick\"></canvas> \n```\n\n## Javascript\n\n```javascript\nangular.module(\"app\", [\"chart.js\"])\n  // Optional configuration\n  .config(['ChartJsProvider', function (ChartJsProvider) {\n    // Configure all charts\n    ChartJsProvider.setOptions({\n      chartColors: ['#FF5252', '#FF8A80'],\n      responsive: false\n    });\n    // Configure all line charts\n    ChartJsProvider.setOptions('line', {\n      showLines: false\n    });\n  }])\n  .controller(\"LineCtrl\", ['$scope', '$timeout', function ($scope, $timeout) {\n\n  $scope.labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"];\n  $scope.series = ['Series A', 'Series B'];\n  $scope.data = [\n    [65, 59, 80, 81, 56, 55, 40],\n    [28, 48, 40, 19, 86, 27, 90]\n  ];\n  $scope.onClick = function (points, evt) {\n    console.log(points, evt);\n  };\n  \n  // Simulate async data update\n  $timeout(function () {\n    $scope.data = [\n      [28, 48, 40, 19, 86, 27, 90],\n      [65, 59, 80, 81, 56, 55, 40]\n    ];\n  }, 3000);\n}]);\n```\n\n## AMD RequireJS\n\nSee [a simple AMD example](examples/amd.js)\n\n## CommonJS e.g. webpack\n\nModule should work with CommonJS out of the box e.g. [browserify](http://browserify.org/) or \n[webpack](http://webpack.github.io/), see a [webpack example](examples/webpack.commonjs.js).\n\n# Reactive\n\nangular-chart.js watch updates on data, series, labels, colors and options and will update, or destroy and recreate, \nthe chart on changes.\n\n# Events\n\nangular-chart.js listens to the following events on the `scope` and acts accordingly:\n\n* `$destroy`: call `.destroy()` on the chart\n* `$resize`: call `.resize()` on the chart\n\nangular-chart.js emits the following events on the `scope` and pass the chart as argument:\n\n* `chart-create`: when chart is created\n* `chart-update`: when chart is updated\n* `chart-destroy`: when chart is destroyed\n\n```\n$scope.$on('chart-create', function (evt, chart) {\n  console.log(chart);\n});\n```\n\n**Note**: the event can be emitted multiple times for each chart as the chart can be destroyed and\ncreated multiple times during angular `watch` lifecycle.\n\nangular-chart.js listens to the scope `$destroy` event and destroys the chart when it happens.\n\n# Colors\n\nThere are a set of 7 default colors. Colors can be replaced using the `colors` attribute.\nIf there is more data than colors, colors are generated randomly or can be provided \nvia a function through the `getColor` attribute.\n\nHex colors are converted to Chart.js colors automatically, \nincluding different shades for highlight, fill, stroke, etc.\n\nRGB colors may be input by using a string in the format \"rgb(r,g,b)\".\n\n## Example - RGB Colors\n\n```\nangular.module('app',['chart.js'])\n        .controller('MainController', function($scope){ \n          $scope.colors = [\"rgb(159,204,0)\",\"rgb(250,109,33)\",\"rgb(154,154,154)\"];\n          $scope.labels = [\"Green\", \"Orange\", \"Grey\"];\n          $scope.data = [300, 500, 100];\n        });\n```\n\nRGBA colors may also be input by using a string in the format \"rgba(r,g,b,a)\".\nThey may be used alongside RGB colors and/or Hex colors.\n\n## Example - RGBA Colors\n```\nangular.module('app',['chart.js'])\n        .controller('MainController', function($scope){ \n          $scope.colors = [\"rgba(159,204,0,0.5)\",\"rgba(250,109,33,0.7)\",\"rgba(154,154,154,0.5)\"];\n          $scope.labels = [\"Green\", \"Orange\", \"Grey\"];\n          $scope.data = [300, 500, 100];\n        });\n```\n\nColors may also be input as an object by using the format in the example below.\nColors input as objects, Hex colors, RGB, and RGBA colors may be mixed and matched.\n\n## Example - input color as an object\n```\nangular.module('app',['chart.js'])\n        .controller('MainController', function($scope){ \n          $scope.colors = [\n            {\n              backgroundColor: \"rgba(159,204,0, 0.2)\",\n              pointBackgroundColor: \"rgba(159,204,0, 1)\",\n              pointHoverBackgroundColor: \"rgba(159,204,0, 0.8)\",\n              borderColor: \"rgba(159,204,0, 1)\",\n              pointBorderColor: '#fff',\n              pointHoverBorderColor: \"rgba(159,204,0, 1)\"\n            },\"rgba(250,109,33,0.5)\",\"#9a9a9a\",\"rgb(233,177,69)\"\n          ];\n          $scope.labels = [\"Green\", \"Peach\", \"Grey\", \"Orange\"];\n          $scope.data = [300, 500, 100, 150];\n        });\n```\n\n## Browser compatibility\n\nFor IE8 and older browsers, you will need \nto include [excanvas](https://code.google.com/p/explorercanvas/wiki/Instructions). \nYou will also need a [shim](https://github.com/es-shims/es5-shim) for ES5 functions.\n\nYou also need to have  ```height``` and ```width``` attributes for the ```<canvas>``` tag of your chart \nif using IE8 and older browsers. If you *do not* have these attributes, you will need a \n[getComputedStyle shim](https://github.com/Financial-Times/polyfill-service/blob/master/polyfills/getComputedStyle/polyfill.js) \nand the line ```document.defaultView = window;```, but there still may be errors (due to code in Chart.js).\n\n```html\n<head>\n<!--[if lt IE 9]>\n  <script src=\"excanvas.js\"></script>\n  <script src=\"es5-shim.js\"></script>\n<![endif]-->\n</head>\n```\n\n# Issues\n\n**Issues or feature requests for Chart.js (e.g. new chart type, new axis, etc.) need to be opened on \n[Chart.js issues tracker](https://github.com/nnnick/Chart.js/issues)**\n\n**For general questions about usage, please use [http://stackoverflow.com/](http://stackoverflow.com/)**\n \nPlease check if issue exists first, otherwise open issue in [github](https://github.com/jtblin/angular-chart.js/issues). \n**Ensure you add a link to a plunker, jsbin, or equivalent.** \n\nHere is a [jsbin template](http://jsbin.com/rodunob/edit?html,js,output) for convenience.\n\n# v0.x - Chart.js v1.x - deprecated\n\nThis is the deprecated version of angular-chart.js that uses the v1.x version of Chart.js.\nIf you want to use this version, please checkout the \n[chartjs-1.x branch](https://github.com/jtblin/angular-chart.js/tree/chartjs-1.x)\n\n# Contributing\n \nPull requests welcome!\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Contributors\n\nThank you to the [contributors](https://github.com/jtblin/angular-chart.js/graphs/contributors)!\n\n# Author\n\nJerome Touffe-Blin, [@jtblin](https://twitter.com/jtblin), [About me](http://about.me/jtblin)\n\n# License\n\nangular-chart.js is copyright 2016 Jerome Touffe-Blin and contributors. \nIt is licensed under the BSD license. See the include LICENSE file for details.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jtblin/angular-chart.js/issues"
  },
  "_id": "angular-chart.js@1.1.1",
  "dist": {
    "shasum": "80f26faea2ef8f2e25413a4a1ee86bfeaeb408d7"
  },
  "_from": "angular-chart.js@",
  "_resolved": "https://registry.npmjs.org/angular-chart.js/-/angular-chart.js-1.1.1.tgz"
}
